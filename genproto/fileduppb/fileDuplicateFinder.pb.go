// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: fileDuplicateFinder.proto

package fileduppb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	RelativePath  string                 `protobuf:"bytes,2,opt,name=relativePath,proto3" json:"relativePath,omitempty"`
	FileSize      int64                  `protobuf:"varint,3,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_fileDuplicateFinder_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fileDuplicateFinder_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_fileDuplicateFinder_proto_rawDescGZIP(), []int{0}
}

func (x *FileInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileInfo) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *FileInfo) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

type FileChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       []byte                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	mi := &file_fileDuplicateFinder_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_fileDuplicateFinder_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_fileDuplicateFinder_proto_rawDescGZIP(), []int{1}
}

func (x *FileChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type FileData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          *FileInfo              `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Chunks        []*FileChunk           `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileData) Reset() {
	*x = FileData{}
	mi := &file_fileDuplicateFinder_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileData) ProtoMessage() {}

func (x *FileData) ProtoReflect() protoreflect.Message {
	mi := &file_fileDuplicateFinder_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileData.ProtoReflect.Descriptor instead.
func (*FileData) Descriptor() ([]byte, []int) {
	return file_fileDuplicateFinder_proto_rawDescGZIP(), []int{2}
}

func (x *FileData) GetInfo() *FileInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *FileData) GetChunks() []*FileChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type DuplicateResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Duplicates    []string               `protobuf:"bytes,1,rep,name=duplicates,proto3" json:"duplicates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DuplicateResult) Reset() {
	*x = DuplicateResult{}
	mi := &file_fileDuplicateFinder_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DuplicateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateResult) ProtoMessage() {}

func (x *DuplicateResult) ProtoReflect() protoreflect.Message {
	mi := &file_fileDuplicateFinder_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateResult.ProtoReflect.Descriptor instead.
func (*DuplicateResult) Descriptor() ([]byte, []int) {
	return file_fileDuplicateFinder_proto_rawDescGZIP(), []int{3}
}

func (x *DuplicateResult) GetDuplicates() []string {
	if x != nil {
		return x.Duplicates
	}
	return nil
}

var File_fileDuplicateFinder_proto protoreflect.FileDescriptor

const file_fileDuplicateFinder_proto_rawDesc = "" +
	"\n" +
	"\x19fileDuplicateFinder.proto\"f\n" +
	"\bFileInfo\x12\x1a\n" +
	"\bfileName\x18\x01 \x01(\tR\bfileName\x12\"\n" +
	"\frelativePath\x18\x02 \x01(\tR\frelativePath\x12\x1a\n" +
	"\bfileSize\x18\x03 \x01(\x03R\bfileSize\"%\n" +
	"\tFileChunk\x12\x18\n" +
	"\acontent\x18\x01 \x01(\fR\acontent\"M\n" +
	"\bFileData\x12\x1d\n" +
	"\x04info\x18\x01 \x01(\v2\t.FileInfoR\x04info\x12\"\n" +
	"\x06chunks\x18\x02 \x03(\v2\n" +
	".FileChunkR\x06chunks\"1\n" +
	"\x0fDuplicateResult\x12\x1e\n" +
	"\n" +
	"duplicates\x18\x01 \x03(\tR\n" +
	"duplicates2?\n" +
	"\x0fDuplicateFinder\x12,\n" +
	"\vUploadFiles\x12\t.FileData\x1a\x10.DuplicateResult(\x01BAZ?github.com/YenXXXW/FileDuplicateFinder/gen/go/filedup;fileduppbb\x06proto3"

var (
	file_fileDuplicateFinder_proto_rawDescOnce sync.Once
	file_fileDuplicateFinder_proto_rawDescData []byte
)

func file_fileDuplicateFinder_proto_rawDescGZIP() []byte {
	file_fileDuplicateFinder_proto_rawDescOnce.Do(func() {
		file_fileDuplicateFinder_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_fileDuplicateFinder_proto_rawDesc), len(file_fileDuplicateFinder_proto_rawDesc)))
	})
	return file_fileDuplicateFinder_proto_rawDescData
}

var file_fileDuplicateFinder_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_fileDuplicateFinder_proto_goTypes = []any{
	(*FileInfo)(nil),        // 0: FileInfo
	(*FileChunk)(nil),       // 1: FileChunk
	(*FileData)(nil),        // 2: FileData
	(*DuplicateResult)(nil), // 3: DuplicateResult
}
var file_fileDuplicateFinder_proto_depIdxs = []int32{
	0, // 0: FileData.info:type_name -> FileInfo
	1, // 1: FileData.chunks:type_name -> FileChunk
	2, // 2: DuplicateFinder.UploadFiles:input_type -> FileData
	3, // 3: DuplicateFinder.UploadFiles:output_type -> DuplicateResult
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_fileDuplicateFinder_proto_init() }
func file_fileDuplicateFinder_proto_init() {
	if File_fileDuplicateFinder_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fileDuplicateFinder_proto_rawDesc), len(file_fileDuplicateFinder_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fileDuplicateFinder_proto_goTypes,
		DependencyIndexes: file_fileDuplicateFinder_proto_depIdxs,
		MessageInfos:      file_fileDuplicateFinder_proto_msgTypes,
	}.Build()
	File_fileDuplicateFinder_proto = out.File
	file_fileDuplicateFinder_proto_goTypes = nil
	file_fileDuplicateFinder_proto_depIdxs = nil
}
